name: CI/CD (SSM)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run checks
        env:
          DJANGO_SECRET_KEY: test-key
        run: |
          python manage.py check
          python manage.py test --verbosity=2

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      OWNER: SWCMAP-C-DOODOOK
      REPO: DOODOOK_BE
      INSTANCE_ID: i-0462f20868c7cc71f

      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
    steps:
      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::788391084087:role/DooDook_gitAction
          aws-region: ap-northeast-2

      - name: Ensure AWS CLI v2
        run: |
          set -euxo pipefail
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y unzip
            curl -sS https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Deploy via SSM RunCommand
        id: ssm
        run: |
          set -euxo pipefail

          DEPLOY=$(cat <<'EOS'
          set -euxo pipefail

          # --- bootstrap: 패키지 설치 확인 (Amazon Linux 2023 호환) ---
          NEED_INSTALL=0
          command -v git >/dev/null 2>&1 || NEED_INSTALL=1
          command -v python3 >/dev/null 2>&1 || NEED_INSTALL=1
          command -v nginx >/dev/null 2>&1 || NEED_INSTALL=1
          if [ "$NEED_INSTALL" -eq 1 ]; then
            if command -v dnf >/dev/null 2>&1; then
              sudo dnf -y update
              sudo dnf -y install --allowerasing git python3 python3-pip nginx
            else
              sudo yum -y update
              sudo yum -y install git python3 python3-pip nginx
            fi
          fi

          # 디렉토리/권한
          sudo mkdir -p /var/www/DOODOOK_BE
          sudo chown -R ec2-user:nginx /var/www/DOODOOK_BE
          cd /var/www/DOODOOK_BE

          # git “dubious ownership” 방지: system 레벨 설정 (HOME 불필요)
          sudo git config --system --add safe.directory /var/www/DOODOOK_BE

          # 리포 동기화 (퍼블릭 리포 기준)
          if [ ! -d .git ]; then
            git clone https://github.com/${{ env.OWNER }}/${{ env.REPO }}.git .
          else
            git fetch --all || true
            git reset --hard origin/main || true
            git clean -fd || true
          fi

          # 파이썬 의존성
          python3 -m venv .venv || true
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          # .env 생성/갱신 (GitHub Actions 시크릿 주입)
          cat > .env <<'ENV'
          DJANGO_SECRET_KEY=${{ env.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE=config.settings

          DB_ENGINE=postgresql
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          DB_CONN_MAX_AGE=60

          ALLOWED_HOSTS=${{ env.ALLOWED_HOSTS }}
          ENV

          # manage.py가 .env 자동 로드하지 않는 경우 대비 (export)
          set -a
          [ -f .env ] && . ./.env
          set +a

          # (선택) DB 포트 연결 체크: RDS가 사설망/터널 의존이면 OFF 권장
          if [ -n "${DB_HOST:-}" ] && [ -n "${DB_PORT:-}" ]; then
            if ! timeout 3 bash -c "cat < /dev/null > /dev/tcp/$DB_HOST/$DB_PORT"; then
              echo "DB 포트 연결 실패: $DB_HOST:$DB_PORT"
              exit 1
            fi
          fi

          # 마이그/정적
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput

          # gunicorn systemd 유닛 (최초 1회 생성)
          if [ ! -f /etc/systemd/system/gunicorn.service ]; then
            sudo tee /etc/systemd/system/gunicorn.service >/dev/null <<'UNIT'
          [Unit]
          Description=Gunicorn for DOODOOK_BE
          After=network.target

          [Service]
          User=ec2-user
          Group=nginx
          WorkingDirectory=/var/www/DOODOOK_BE
          Environment="DJANGO_SETTINGS_MODULE=config.settings"
          EnvironmentFile=/var/www/DOODOOK_BE/.env
          ExecStart=/var/www/DOODOOK_BE/.venv/bin/gunicorn config.wsgi:application --bind 127.0.0.1:8000 --workers 3 --timeout 60
          Restart=always

          [Install]
          WantedBy=multi-user.target
          UNIT
            sudo systemctl daemon-reload
            sudo systemctl enable gunicorn
          fi
          sudo systemctl restart gunicorn

          # 기본 nginx conf 제거(서버네임 충돌 방지)
          sudo rm -f /etc/nginx/conf.d/default.conf || true

          # nginx 사이트 conf (최초 1회 생성) — collectstatic 경로는 staticfiles
          if [ ! -f /etc/nginx/conf.d/doodook_be.conf ]; then
            sudo tee /etc/nginx/conf.d/doodook_be.conf >/dev/null <<'NGX'
          server {
            listen 80;
            server_name _;
            client_max_body_size 20M;

            location /static/ {
              alias /var/www/DOODOOK_BE/staticfiles/;
              access_log off;
              expires 7d;
            }

            location /media/ {
              alias /var/www/DOODOOK_BE/media/;
              access_log off;
              expires 7d;
            }

            location / {
              proxy_set_header Host $host;
              proxy_set_header X-Forwarded-For $remote_addr;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_pass http://127.0.0.1:8000;
            }
          }
          NGX
          fi

          # nginx 설정 검사 및 시작/재적용
          sudo nginx -t
          if ! systemctl is-active --quiet nginx; then
            sudo systemctl enable nginx
            sudo systemctl start nginx
          else
            sudo systemctl reload nginx || sudo systemctl restart nginx
          fi

          # 헬스체크 (실패 시 진단 로그 출력)
          if ! curl -sfI http://127.0.0.1/healthz/ >/dev/null; then
            echo "=== gunicorn status ==="
            sudo systemctl status gunicorn --no-pager || true
            echo "=== nginx status ==="
            sudo systemctl status nginx --no-pager || true
            echo "=== gunicorn journal (last 200) ==="
            sudo journalctl -u gunicorn -n 200 --no-pager || true
            echo "=== nginx error log (last 200) ==="
            sudo tail -n 200 /var/log/nginx/error.log || true
            exit 1
          fi
          EOS
          )

          # jq로 SSM 파라미터(JSON) 생성
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          jq -n --arg script "$DEPLOY" '{commands: [$script]}' > ssm-params.json

          # SSM 실행
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${INSTANCE_ID}" \
            --document-name "AWS-RunShellScript" \
            --comment "doodook deploy" \
            --parameters file://ssm-params.json \
            --query "Command.CommandId" --output text)
          echo "CMD_ID=$CMD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for completion (with logs)
        run: |
          set -e
          for i in $(seq 1 60); do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "${{ steps.ssm.outputs.CMD_ID }}" \
              --details --query "CommandInvocations[0].Status" --output text || true)
            echo "Status: $STATUS"
            if [ "$STATUS" = "Success" ]; then exit 0; fi
            if [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "---- SSM STDERR ----"
              aws ssm get-command-invocation \
                --command-id "${{ steps.ssm.outputs.CMD_ID }}" \
                --instance-id "${{ env.INSTANCE_ID }}" \
                --query "StandardErrorContent" --output text || true
              echo "---- SSM STDOUT ----"
              aws ssm get-command-invocation \
                --command-id "${{ steps.ssm.outputs.CMD_ID }}" \
                --instance-id "${{ env.INSTANCE_ID }}" \
                --query "StandardOutputContent" --output text || true
              exit 1
            fi
            sleep 5
          done
          echo "Timeout waiting for SSM"
          exit 1